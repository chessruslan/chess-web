import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';
import 'chess_board.dart';

void main() {
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Chess API Demo',
      theme: ThemeData(
        colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),
        useMaterial3: true,
      ),
      home: const MyHomePage(title: 'Chess API with FEN'),
    );
  }
}

class MyHomePage extends StatefulWidget {
  const MyHomePage({super.key, required this.title});
  final String title;

  @override
  State<MyHomePage> createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  final TextEditingController _fenController = TextEditingController(
    text: 'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR b KQkq - 0 1',
  );

  String? _result;
  bool _loading = false;

  Future<void> fetchBestMove() async {
    final fen = _fenController.text.trim();
    if (fen.isEmpty) return;

    setState(() {
      _loading = true;
      _result = null;
    });

    final url = Uri.parse('https://chess-api.com/v1');

    try {
      final response = await http.post(
        url,
        headers: {'Content-Type': 'application/json'},
        body: jsonEncode({
          'fen': fen,
          'variants': 3,
          'depth': 18,
          'maxThinkingTime': 2000,
        }),
      );

      if (response.statusCode == 200) {
        final json = jsonDecode(response.body);
        setState(() {
          _result = json.toString(); // или json['bestmove']
        });
      } else {
        setState(() {
          _result = 'Error ${response.statusCode}: ${response.body}';
        });
      }
    } catch (e) {
      setState(() {
        _result = 'Exception: $e';
      });
    } finally {
      setState(() {
        _loading = false;
      });
    }
  }

  @override
  void dispose() {
    _fenController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text(widget.title)),
      body: Center(
        child: Padding(
          padding: const EdgeInsets.all(16),
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              TextField(
                controller: _fenController,
                decoration: const InputDecoration(
                  border: OutlineInputBorder(),
                  labelText: 'Enter FEN',
                ),
              ),
              const SizedBox(height: 16),
              ElevatedButton(
                onPressed: _loading ? null : fetchBestMove,
                child: const Text('Get Best Move'),
              ),
              const SizedBox(height: 24),
              if (_loading)
                const CircularProgressIndicator()
              else if (_result != null)
                SelectableText(
                  _result!,
                  style: const TextStyle(fontSize: 14),
                )
              else
                const Text('Enter a FEN and press the button.'),
            ],
          ),
        ),
      ),
    );
  }
}
